(root source.ada
    (zone meta.function.ada
        (match
            (regex [\b(?i:(function|procedure))\b\s+(\w+(\.\w+)?|"(?:\+|-|=|\*|/)")]
                (1 storage.type.function.ada)
                (2 entity.name.function.ada))))
    (zone meta.function.ada
        (match
            (regex [\b(?i:(package)(?:\b\s+(body))?)\b\s+(\w+(\.\w+)*|"(?:\+|-|=|\*|/)")]
                (3 entity.name.type.package.ada)
                (1 storage.type.package.ada)
                (2 keyword.other.body.ada))))
    (zone meta.function.ada
        (match
            (regex [\b(?i:(end))\b\s+(\w+(\.\w+)*|"(\+|-|=|\*|/)")\s?;]
                (1 storage.type.function.ada)
                (2 entity.name.function.ada))))
    (zone meta.function.ada
        (match
            (regex [(^|[\r\n])((?i:((limited[ \t]*)?(private[ \t]*)?with))[ \t]+(\w+(\.\w+)*);[ \t]*)+]
                (1 keyword.control.import.ada)
                (2 string.unquoted.import.ada))))
    (zone keyword.control.ada
        (match
            (regex [\b(?i:(begin|end|package))\b])))
    (zone keyword.other.ada
        (match
            (regex [\b(?i:(\=>|abort|abs|abstract|accept|access|aliased|all|and|array|at|body|case|constant|declare|delay|delta|digits|do|else|elsif|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|or|others|out|overriding|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor))\b])))
    (zone constant.numeric.ada
        (match
            (regex [\b(?i:([0-9](_?[0-9])*((#[0-9a-f](_?[0-9a-f])*#((e(\+|-)?[0-9](_?[0-9])*\b)|\B))|((\.[0-9](_?[0-9])*)?(e(\+|-)?[0-9](_?[0-9])*)?\b))))])))
    (zone string.quoted.double.ada
        (start
            (regex "
                (0 punctuation.definition.string.begin.ada)))
        (end
            (regex "
                (0 punctuation.definition.string.end.ada)))
        (subzones
            (zone invalid.illegal.lf-in-string.ada
                (match
                    (regex \n)))))
    (zone comment.line.double-dash.ada
        (match
            (regex [(--)(.*)$\n?]
                (1 punctuation.definition.comment.ada)))))